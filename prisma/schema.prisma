generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  fullName      String
  avatar        String
  coverImage    String?
  password      String
  refreshToken  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  likes         LikeUser[]
  playlists     Playlist[]
  shortVideos   ShortVideo[]
  subscribers   Subscription[] @relation("UserSubscribers")
  subscriptions Subscription[] @relation("UserSubscriptions")
  tweets        Tweet[]
  videos        Video[]
}

model Video {
  id              String          @id @default(uuid())
  videoFile       String
  thumbnail       String
  title           String
  description     String
  duration        Int
  views           Int             @default(0)
  isPublished     Boolean         @default(true)
  isFeatured      Boolean         @default(false)
  category        String
  tags            String[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  publishedAt     DateTime?
  ownerId         String
  viewsLast30Days Int             @default(0)
  earnings        Float           @default(0)
  comments        Comment[]
  likes           Like[]
  playlists       PlaylistVideo[]
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model ShortVideo {
  id             String    @id @default(uuid())
  shortVideoFile String
  thumbnail      String
  title          String
  duration       Int       @default(60)
  views          Int       @default(0)
  isPublished    Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  ownerId        String
  comments       Comment[]
  likes          Like[]
  owner          User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Comment {
  id             String      @id @default(uuid())
  content        String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  videoId        String?
  shortVideoId   String?
  userLikeStatus String      @default("NONE")
  ownerId        String
  parentId       String?
  owner          User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  parent         Comment?    @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies        Comment[]   @relation("CommentReplies")
  shortVideo     ShortVideo? @relation(fields: [shortVideoId], references: [id], onDelete: Cascade)
  video          Video?      @relation(fields: [videoId], references: [id], onDelete: Cascade)
  likes          Like[]
}

model Like {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  type         LikeType
  videoId      String?
  commentId    String?
  shortVideoId String?
  tweetId      String?
  comment      Comment?    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  shortVideo   ShortVideo? @relation(fields: [shortVideoId], references: [id], onDelete: Cascade)
  tweet        Tweet?      @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  video        Video?      @relation(fields: [videoId], references: [id], onDelete: Cascade)
  likedBy      LikeUser[]
}

model LikeUser {
  id     String @id @default(uuid())
  likeId String
  userId String
  like   Like   @relation(fields: [likeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tweet {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String
  likes     Like[]
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Playlist {
  id          String          @id @default(uuid())
  name        String
  description String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  ownerId     String
  owner       User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  videos      PlaylistVideo[]
}

model PlaylistVideo {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  playlistId String
  videoId    String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  channelId String
  channel   User     @relation("UserSubscribers", fields: [channelId], references: [id], onDelete: Cascade)
  user      User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
}

enum LikeType {
  LIKE
  DISLIKE
}
